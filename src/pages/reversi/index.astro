---
import MainContent from "../../components/MainContent.astro";
import TitleAndMeta from "../../components/TitleAndMeta.astro";
---

<TitleAndMeta title="Reversi" />
<MainContent>
  <div class="flex justify-center items-center w-screen h-screen p-4">
    <div
      class="w-3/4 sm:w-1/2 md:w-2/5 lg:w-1/3 max-w-xs sm:max-w-sm md:max-w-md aspect-square"
    >
      <div class="grid grid-cols-8 gap-0 w-full h-full" id="reversi_grid">
        {
          Array.from({ length: 64 }, (_, i) => (
            <div
              class="flex items-center justify-center border-2 border-black bg-[#008d65] text-gray-800 font-bold text-lg m-0 p-0"
              id={`cell_${Math.floor(i / 8)}x${i % 8}`}
            >
              <div
                id={`cell_piece_${Math.floor(i / 8)}x${i % 8}`}
                class="w-full h-full rounded-[50%] flex items-center justify-center bg-transparent transition-colors text-gray-400"
              >
                {/* {Math.floor(i / 8)}x{i % 8} */}
              </div>
            </div>
          ))
        }
      </div>
    </div>
    <div class="ml-6 space-y-4">
      <table>
        <thead>
          <tr>
            <th>Player</th>
            <th>Pieces</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>White</td>
            <td id="points_white"></td>
          </tr>
          <tr>
            <td>Black</td>
            <td id="points_black"></td>
          </tr>
        </tbody>
      </table>
    </div>
    <button
      class="absolute bottom-4 right-4 bg-blue-500 text-white px-4 py-2 rounded"
      id="restart_button"
    >
      Restart
    </button>
  </div>
</MainContent>

<script>
  enum Piece {
    BLACK,
    WHITE,
    NONE,
  }

  const white_points = document.getElementById(
    "points_white"
  ) as HTMLTableCellElement;
  const black_points = document.getElementById(
    "points_black"
  ) as HTMLTableCellElement;

  const game = {
    clickedCell: -1,
    player: Piece.BLACK,
    stepPiece: Piece.WHITE,
    board: new Array(8),
    cpu_to_play: 0,
    won: false,
    game_request: -1,
  };
  for (let row = 0; row < 8; row++) {
    game.board[row] = new Array(8);
    for (let col = 0; col < 8; col++) {
      game.board[row][col] = {
        piece: Piece.NONE,
        elem: document.getElementById(
          `cell_piece_${row}x${col}`
        ) as HTMLDivElement,
      };
    }
  }
  document.getElementById("restart_button")!.onclick = init;
  init();

  function tick() {
    if (game.stepPiece !== game.player && game.cpu_to_play <= Date.now()) {
      const cpu = getMoveCPU(game.stepPiece);
      if (cpu === -1) {
        console.log("CPU has no valid moves, skipping turn.");
      } else {
        console.log(`CPU move: ${cpu[0]}x${cpu[1]}`);
        play(cpu[0], cpu[1], game.stepPiece);
      }
    } else if (game.stepPiece === game.player && game.clickedCell >= 0) {
      const index = game.clickedCell;
      game.clickedCell = -1;
      console.log("Player clicked cell:", index);
      play(Math.floor(index / 8), index % 8, game.player);
      game.cpu_to_play = Date.now() + 500;
    }
    const whiteCount = game.board
      .flat()
      .filter((c) => c.piece === Piece.WHITE).length;
    const blackCount = game.board
      .flat()
      .filter((c) => c.piece === Piece.BLACK).length;
    white_points.textContent = whiteCount.toString();
    black_points.textContent = blackCount.toString();
    if (game.won) {
      game.game_request = -1;
      const winner = whiteCount > blackCount ? "White" : "Black";
      alert(`Game Over! ${winner} wins!`);
    } else {
      game.game_request = requestAnimationFrame(tick);
    }
  }

  function play(
    row: number,
    col: number,
    player: Piece,
    moves: number[][] | undefined = undefined
  ) {
    const validMoves = moves || getValidMoves(player);
    console.log("Valid moves:", validMoves);
    if (!validMoves.some((move) => move[0] === row && move[1] === col)) {
      return;
    }
    game.board[row][col].piece = player;
    propagateMove(row, col, player);
    updateBoard();
    game.stepPiece = game.stepPiece === Piece.WHITE ? Piece.BLACK : Piece.WHITE;
    if (getValidMoves(game.stepPiece).length === 0) {
      game.stepPiece =
        game.stepPiece === Piece.WHITE ? Piece.BLACK : Piece.WHITE;
      if (getValidMoves(game.stepPiece).length === 0) {
        game.won = true;
      }
    }
  }

  function getMoveCPU(player: Piece): number[] | -1 {
    const validMoves = getValidMoves(player);
    if (validMoves.length === 0) {
      return -1; // No valid moves
    }
    return validMoves[Math.floor(Math.random() * validMoves.length)];
  }

  function getValidMoves(player: Piece): number[][] {
    const validMoves: number[][] = [];
    for (let r = 0; r < game.board.length; r++) {
      for (let c = 0; c < game.board[r].length; c++) {
        if (isValidMove(r, c, player)) {
          validMoves.push([r, c]);
        }
      }
    }
    return validMoves;
  }

  function propagateMove(row: number, col: number, player: Piece): void {
    const directions = [
      [0, 1],
      [0, -1],
      [1, 0],
      [-1, 0],
      [1, 1],
      [1, -1],
      [-1, 1],
      [-1, -1],
    ];
    const flips: number[][] = [];
    for (const dir of directions) {
      const flipIndex: number[][] = [];
      let r = row + dir[0];
      let c = col + dir[1];
      let foundOpponent = false;

      while (inBounds(r, c)) {
        if (game.board[r][c].piece === Piece.NONE) {
          break;
        }
        if (game.board[r][c].piece === player) {
          if (foundOpponent) {
            flips.push(...flipIndex);
          }
          break;
        }
        foundOpponent = true;
        flipIndex.push([r, c]);
        r += dir[0];
        c += dir[1];
      }
    }
    for (const flipIndex of flips) {
      game.board[flipIndex[0]][flipIndex[1]].piece = player;
    }
  }

  function inBounds(r: number, c: number): boolean {
    return (
      r >= 0 && r < game.board.length && c >= 0 && c < game.board[r].length
    );
  }

  function isValidMove(row: number, col: number, player: Piece): boolean {
    if (!inBounds(row, col) || game.board[row][col].piece !== Piece.NONE) {
      return false;
    }

    const directions: [number, number][] = [
      [0, 1],
      [0, -1],
      [1, 0],
      [-1, 0],
      [1, 1],
      [1, -1],
      [-1, 1],
      [-1, -1],
    ];

    for (const [dRow, dCol] of directions) {
      let r = row + dRow;
      let c = col + dCol;
      let foundOpponent = false;

      if (
        !inBounds(r, c) ||
        game.board[r][c].piece === Piece.NONE ||
        game.board[r][c].piece === player
      ) {
        continue;
      }
      foundOpponent = true;
      while (true) {
        r += dRow;
        c += dCol;
        if (!inBounds(r, c) || game.board[r][c].piece === Piece.NONE) {
          break;
        }
        if (game.board[r][c].piece === player) {
          return true;
        }
      }
    }
    return false;
  }

  function init() {
    if (game.won) {
      game.won = false;
    }
    if (game.game_request !== -1) {
      cancelAnimationFrame(game.game_request);
    }
    for (const r of game.board) {
      for (const c of r) {
        c.piece = Piece.NONE;
      }
    }
    game.board[3][3].piece = Piece.WHITE;
    game.board[3][4].piece = Piece.BLACK;
    game.board[4][3].piece = Piece.BLACK;
    game.board[4][4].piece = Piece.WHITE;
    game.player = game.player === Piece.WHITE ? Piece.BLACK : Piece.WHITE;
    game.stepPiece = Piece.WHITE;
    game.clickedCell = -1;
    game.cpu_to_play = 0;
    initCallbacks();
    updateBoard();
    tick();
  }

  function updateBoard() {
    for (const r of game.board) {
      for (const c of r) {
        switch (c.piece) {
          case Piece.BLACK:
            c.elem.style.backgroundColor = "black";
            break;
          case Piece.WHITE:
            c.elem.style.backgroundColor = "white";
            break;
          case Piece.NONE:
            c.elem.style.backgroundColor = "transparent";
            break;
        }
      }
    }
  }

  function initCallbacks() {
    const grid = document.getElementById("reversi_grid") as HTMLDivElement;
    grid.childNodes.forEach((cell, index) => {
      index -= 1;
      const piece = document.getElementById(
        `cell_piece_${Math.floor(index / 8)}x${index % 8}`
      ) as HTMLDivElement;
      (cell as HTMLDivElement).onclick = () => {
        game.clickedCell = index;
      };
    });
  }
</script>
