---
import LoadingAnimation from "../../../components/LoadingAnimation.astro";
import TitleAndMeta from "../../../components/TitleAndMeta.astro";
import MainContent from "../../../components/MainContent.astro";

const MathJaxScript: string = await fetch(
  "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js",
).then((response) => response.text());
---

<TitleAndMeta title="Image to Latex" />
<MainContent>
  <script is:inline>
    MathJax = {
      tex: {
        inlineMath: [
          ["$", "$"],
          ["\\(", "\\)"],
        ],
      },
    };
  </script>
  <script is:inline async defer id="MathJax-script" set:html={MathJaxScript} />

  <div id="main_content" class="flex justify-center items-center h-screen">
    <div class="grid grid-cols-3 grid-rows-1 gap-4">
      <div class="grid grid-cols-1 grid-rows-2">
        <div class="w-full h-1/2">
          <img
            id="image_view"
            src=""
            alt="Input image"
            class="h-full w-full object-contain"
          />
        </div>
        <div>
          <input
            type="file"
            name="image_input"
            id="image_input"
            accept="image/*"
          />
        </div>
      </div>
      <div class="col-span-2 relative items-center block w-full">
        <div class="grid grid-cols-1 grid-rows-2">
          <div class="overflow-scroll max-h-full w-full">
            <pre>
            <code id="code-block" class="text-sm text-gray-400 whitespace-pre w-full h-full" />
          </pre>
          </div>
          <div id="output_rendered"></div>
        </div>
      </div>
    </div>
  </div>

  <a href="https://www.mathjax.org" class="absolute bottom-0 right-0 p-4">
    <img
      title="Powered by MathJax"
      src="https://www.mathjax.org/badge/badge.gif"
      alt="Powered by MathJax"
    />
  </a>
  <LoadingAnimation id="all_loading">Loading Model</LoadingAnimation>

  <script type="module">
    import { pipeline } from "https://cdn.jsdelivr.net/npm/@huggingface/transformers@3.0.0";
    const img = document.getElementById("image_input");
    const out = document.getElementById("code-block");
    const out_rendered = document.getElementById("output_rendered");
    const main_content = document.getElementById("main_content");
    const all_loading = document.getElementById("all_loading");
    const img_view = document.getElementById("image_view");
    main_content.style.visibility = "hidden";
    const texify = await pipeline("image-to-text", "Xenova/texify");
    all_loading.remove();
    main_content.style.visibility = "visible";
    img.onchange = async () => {
      await updateTex("$$\\text{loading...}$$");
      const image_source = URL.createObjectURL(img.files[0]);
      img_view.src = image_source;
      const tex = await texify(image_source, {
        max_new_tokens: 384,
      });
      console.log(tex);
      await updateTex(tex[0].generated_text);
    };

    async function updateTex(generatedTex) {
      out.innerText = generatedTex;
      out_rendered.innerText = generatedTex;
      await MathJax.typesetPromise([out_rendered]);
    }
  </script>
</MainContent>
