---
import "./_lua_wasm.css";
import "./_prism.css";
---

<script src="./prism.js">
    import Prism from "./prism";
</script>
<div id="code_container">
    <pre
        id="code_block"><code class="language-lua" contenteditable="true" id="luain">print("Hello World!")</code></pre>
</div>
<script is:inline>
    function get_cursor_pos(elem) {
        const sel = window.getSelection();
        if (sel.rangeCount === 0) {
            return { start: 0, end: 0, sel };
        }
        const range = sel.getRangeAt(0);
        const preCaretRange = range.cloneRange();
        preCaretRange.selectNodeContents(elem);
        preCaretRange.setEnd(range.startContainer, range.startOffset);
        const start = preCaretRange.toString().length;
        preCaretRange.setEnd(range.endContainer, range.endOffset);
        const end = preCaretRange.toString().length;
        return { start, end, sel };
    }
    function set_cursor_pos(elem, posi) {
        const createRange = (node, rangePos) => {
            let range = document.createRange();
            range.selectNode(node);
            range.setStart(node, 0);

            let pos = 0;
            const stack = [node];
            while (stack.length > 0) {
                const current = stack.pop();

                if (current.nodeType === Node.TEXT_NODE) {
                    const len = current.textContent.length;
                    if (pos + len >= rangePos.end) {
                        range.setStart(current, rangePos.end - pos);
                        range.setEnd(current, rangePos.end - pos);
                        return range;
                    }
                    pos += len;
                } else if (
                    current.childNodes &&
                    current.childNodes.length > 0
                ) {
                    for (let i = current.childNodes.length - 1; i >= 0; i--) {
                        stack.push(current.childNodes[i]);
                    }
                }
            }

            // The target position is greater than the
            // length of the contenteditable element.
            range.setStart(node, node.childNodes.length);
            range.setEnd(node, node.childNodes.length);
            return range;
        };
        const range = createRange(elem, posi);
        const selection = window.getSelection();
        selection.removeAllRanges();
        selection.addRange(range);
    }

    document.getElementById("luain").oninput = () => {
        const pos = get_cursor_pos(document.getElementById("luain"));
        console.log(pos);
        Prism.highlightElement(document.getElementById("luain"));
        set_cursor_pos(document.getElementById("luain"), pos);
    };
</script>
<button id="run">Run</button>
<p id="output"></p>
<script>
    import { lua_wasm } from "./lua_wasm.js";
    let execute: (e: string) => void;
    window.onload = async () => {
        execute = (await lua_wasm()).cwrap("run_lua", null, ["string"]);
        window["execute"] = execute;
        document.getElementById("run")!.onclick = () => {
            let e = (document.getElementById("luain") as HTMLDivElement)
                .innerText;
            execute(e);
        };
    };
</script>
